#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct{
    struct Vert *cima;
    struct Vert *baixo;
    struct Vert *direita;
    struct Vert *esquerda;
    int lmax;
    int max;
    int verific;
}Vert;

typedef Vert *fcv;//funcao cria vertice
fcv Aloca(){
    Vert *vertice;
    vertice=(Vert*)malloc(sizeof(Vert));

    vertice->lmax=0;
    vertice->baixo=NULL;
    vertice->cima=NULL;
    vertice->direita=NULL;
    vertice->esquerda=NULL;
    vertice->verific=0;
    vertice->max=0;
    return vertice;
}

Vert CriaA(Vert *P0,Vert *PAtual,char **lab,int i,int j,int TL,int TC){
     printf("analisando lab[%d][%d]",i,j);

     if(PAtual->verific!=0 || i+1==TL||j+1==TC){

        PAtual->verific=0;
        //printf("volta ---- max:%d max: %d\n\n",P0->lmax,P0->max);
        return;
    }
    Vert *Aux=Aloca();
     if(lab[i][j+1]=='.' && PAtual->direita==NULL && PAtual->verific==0){//ponto a direita
        printf("vert a direita\n");
        P0->lmax++;
        PAtual->verific++;
        PAtual->direita=Aux;
        Aux->esquerda=PAtual;
        CriaA(P0,Aux,lab,i,j+1,TL,TC);
        if((P0->max)<(P0->lmax)){
            P0->max=P0->lmax;
        }
        printf("voltou para lab[%d][%d]  ------ max: %d lmax:%d \n",i,j,P0->max, P0->lmax);
        P0->lmax--;
     }
     if(j>0 && lab[i][j-1]=='.' && PAtual->esquerda==NULL && PAtual->verific==0){//ponto a esquerda
        printf("vert a esquerda\n");
        P0->lmax++;
        PAtual->verific++;
        PAtual->esquerda=Aux;
        Aux->direita=PAtual;
        CriaA(P0,Aux,lab,i,j-1,TL,TC);
        if(P0->lmax>P0->max){
            P0->max=P0->lmax;
        }
        printf("voltou para lab[%d][%d] ------ max: %d lmax:%d \n",i,j,P0->max, P0->lmax);
        P0->lmax--;

     }
    if(lab[i+1][j]=='.'&& PAtual->baixo==NULL && PAtual->verific==0){//ponto abaixo
        printf("vert embaixo\n");
        P0->lmax++;
        PAtual->verific++;
        PAtual->baixo=Aux;
        Aux->cima=PAtual;
        CriaA(P0,Aux,lab,i+1,j,TL,TC);
        if((P0->lmax)>(P0->max)){
            P0->max=P0->lmax;
        }
        printf("voltou para lab[%d][%d] ------ max: %d lmax:%d \n",i,j,P0->max, P0->lmax);
        P0->lmax--;
    }
    if(i>0 && lab[i-1][j]=='.' && PAtual->cima==NULL && PAtual->verific==0 ){// ponto em cima
        printf("vert acima \n");
        P0->lmax++;
        PAtual->verific++;
        PAtual->cima=Aux;
        Aux->baixo=PAtual;
        CriaA(P0,Aux,lab,i-1,j,TL,TC);
        if((P0->lmax)>(P0->max)){
        P0->max=P0->lmax;
        }
        printf("voltou para lab[%d][%d] ------ max: %d lmax:%d \n",i,j,P0->max, P0->lmax);
        P0->lmax--;
    }
    PAtual->verific=0;
    printf("retornou de td-----Lab[%d][%d]\n",i,j);
    if(PAtual->cima!=NULL){
        printf("NAO EH NULO==================================================================\n");
    }
}
int BuscaA(char **lab, int TL, int TC){
    int i=0,j=0,k;
    Vert *saidas=(Vert *)malloc(((TC+TL)-1)*sizeof(Vert));

    for(k=0;k<(TL+TC)-1;k++){
        saidas[k].lmax=0;
        saidas[k].baixo=NULL;
        saidas[k].cima=NULL;
        saidas[k].direita=NULL;
        saidas[k].esquerda=NULL;
        saidas[k].verific=0;
        saidas[k].max=0;
    }


    for(i=0;i<TL;i++){
         if(lab[i][0]=='.'){
    printf("---------------------------------vai ser analisado : lab[%d][0]\n",i);

            CriaA(&saidas[i],Aloca(),lab,i,j,TL,TC);
            printf("%d", saidas->max);
        }
    }


}

int proc1(char **lab, int m, int n){
    int i=0,j=0;
    Vert *P0;
    /*while(lab[i][j]=='#'){//laco pra achar o primeiro ponto
        i++;
            while(lab[i][j]=='#'){
                j++;
                if(j==m){
                 j=0;
                 break;
                }
            if(i==n){
                    break;
            }
        }
   }//laco pra achar o primeiro ponto*/


   BuscaA(lab,m,n);
   return 0;
}

int main(){
    char **lab;
    int m,n,i,j;
    //Vert *ant,**grafo;
    scanf("%d %d", &n,&m);
    //restricao


    lab=(char**)malloc(n*sizeof(char*));
    for(i=0;i<m;i++){
        lab[i]=(char*)malloc(sizeof(char));
    }

    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%s",&lab[i][j]);
        }
    }

    proc1(lab, m,n);

    for(i=0;i<n;i++){
        for(j=0;j<m;j++){

            printf("%c",lab[i][j]);
        }
        printf("\n");
    }

    return 0;

}
